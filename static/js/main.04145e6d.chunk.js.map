{"version":3,"sources":["logo.svg","Totaldata.js","Statewise.js","App.js","Header.js","serviceWorker.js","index.js"],"names":["module","exports","Totaldata","props","state","error","isLoaded","items","axios","get","then","res","setState","data","statewise","catch","this","class","scope","active","confirmed","deltaconfirmed","recovered","deltarecovered","deaths","deltadeaths","lastupdatedtime","React","Component","Statewise","lastUpdate","colSpan","map","dict","index","length","App","className","Header","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","role","aria-haspopup","aria-labelledby","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.04145e6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nclass Totaldata extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        error: null,\r\n        isLoaded: true,\r\n        items: []\r\n      };\r\n    }\r\n  \r\n    \r\ncomponentDidMount(){\r\n    axios.get(\"https://api.covid19india.org/data.json\",{}).then((res)=>{\r\n    //on success\r\n    this.setState({\r\n    items:res.data.statewise[0]\r\n    });\r\n    }).catch((error)=>{\r\n    //on error\r\n    \r\n    });\r\n    }\r\n  \r\n    render() {\r\n      const { error, isLoaded, items } = this.state;\r\n      //console.log(items.deltaconfirmed-(items.deltadeaths+items.deltarecovered));\r\n      if (error) {\r\n        return <div>Error Occurred....</div>;\r\n      } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (\r\n          <div class=\"container\">\r\n            <div class=\"card text-center mt-5 mb-3 ml-1 mr-1 shadow bg-white\">\r\n            <div class=\"card-header bg-dark text-light\">\r\n              COVID Updates (INDIA)\r\n            </div>\r\n            <div class=\"card-body text-center\">\r\n\r\n          \r\n            \r\n                \r\n            <div class=\"table-responsive\">\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\" class=\"text-primary\">Active</th>\r\n                  <th scope=\"col\" class=\"text-warning\">Confirmed</th>\r\n                  <th scope=\"col\" class=\"text-success\">Recovered</th>\r\n                  <th scope=\"col\" class=\"text-danger\">Deceased</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              <tr>\r\n                <td scope=\"col\"><button class=\"btn btn-primary mr-1\">{items.active}</button></td>\r\n                <td scope=\"col\"><button class=\"btn btn-warning mr-1 text-dark\">{items.confirmed}<span class=\"badge badge-light ml-2 text-danger\">{items.deltaconfirmed} &#x21E7;</span></button></td>\r\n                <td scope=\"col\"><button class=\"btn btn-success mr-1\">{items.recovered}<span class=\"badge badge-light ml-2 text-success\">{items.deltarecovered} &#x21E7;</span></button></td>\r\n                <td scope=\"col\"><button class=\"btn btn-danger mr-1\">{items.deaths}<span class=\"badge badge-light ml-2 text-danger\">{items.deltadeaths} &#x21E7;</span></button></td>\r\n              </tr>\r\n              </tbody>\r\n            </table>\r\n            </div>\r\n            </div>\r\n            <div class=\"card-footer text-success\">\r\n             Last Updated at {items.lastupdatedtime}\r\n            </div>\r\n            \r\n            </div>\r\n            \r\n\r\n            </div>\r\n            \r\n\r\n          \r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\nexport default Totaldata;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport axios from 'axios';\r\n\r\nclass Statewise extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        error: null,\r\n        isLoaded: true,\r\n        items: [],\r\n        lastUpdate : null\r\n      };\r\n    }\r\n  \r\n    \r\ncomponentDidMount(){\r\n    axios.get(\"https://api.covid19india.org/data.json\",{}).then((res)=>{\r\n    //on success\r\n    this.setState({\r\n    items:res.data.statewise,\r\n    lastUpdate:res.data.statewise[0].lastupdatedtime\r\n    });\r\n    }).catch((error)=>{\r\n    //on error\r\n    \r\n    });\r\n    }\r\n  \r\n    render() {\r\n      const { error, isLoaded, items,lastUpdate } = this.state;\r\n      //console.log(items);\r\n      if (error) {\r\n        return <div>Error Occurred....</div>;\r\n      } else if (!isLoaded) {\r\n        return <div>Loading...</div>;\r\n      } else {\r\n        return (\r\n          <div class=\"container\">\r\n            <div class=\"card text-center mt-5 mb-3 ml-1 mr-1 shadow bg-white\">\r\n            <div class=\"card-header bg-dark text-light\">\r\n              COVID Updates (STATE WISE)\r\n            </div>\r\n            <div class=\"card-body text-center\">\r\n              <center>\r\n          <div class=\"table-responsive\">\r\n            <table class=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th scope=\"col\" class=\"text-dark\" colSpan=\"4\">Name of State</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n              { items.map(function(dict,index){\r\n                  if(index>=1 && index<=items.length){\r\n                return(\r\n                   \r\n                   // console.log(dict.state)\r\n                \r\n                    <div> \r\n                <tr class=\"table-dark\">\r\n                    <td scope=\"col\" colSpan=\"4\"><button class=\"btn btn-dark mr-1\">{dict.state}</button></td>\r\n                </tr>\r\n                <tr>\r\n                    <td scope=\"col\" class=\"text-primary\">Active</td>\r\n                    <td scope=\"col\" class=\"text-warning\">Confirmed</td>\r\n                    <td scope=\"col\" class=\"text-success\">Recovered</td>\r\n                    <td scope=\"col\" class=\"text-danger\">Deceased</td>\r\n                </tr>\r\n                <tr>\r\n                    <td scope=\"col\"><button class=\"btn btn-primary mr-1\">{dict.active}</button></td>\r\n                    <td scope=\"col\"><button class=\"btn btn-warning mr-1 text-dark\">{dict.confirmed}<span class=\"badge badge-light ml-2 text-danger\">{dict.deltaconfirmed} &#x21E7;</span></button></td>\r\n                    <td scope=\"col\"><button class=\"btn btn-success mr-1\">{dict.recovered}<span class=\"badge badge-light ml-2 text-success\">{dict.deltarecovered} &#x21E7;</span></button></td>\r\n                    <td scope=\"col\"><button class=\"btn btn-danger mr-1\">{dict.deaths}<span class=\"badge badge-light ml-2 text-danger\">{dict.deltadeaths} &#x21E7;</span></button></td>\r\n                </tr>\r\n                </div>\r\n                \r\n                    \r\n                    )}\r\n                })}\r\n              \r\n                  \r\n              \r\n              </tbody>\r\n            </table>\r\n            \r\n            </div>\r\n            </center>\r\n            </div>\r\n            <div class=\"card-footer text-success\">\r\n             Last Updated at {lastUpdate}\r\n            </div>\r\n            </div>\r\n            </div>\r\n            \r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\nexport default Statewise;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Totaldata from './Totaldata';\nimport Statewise from './Statewise';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n    <Totaldata/>\n    \n    <Statewise/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction Header(){\r\n    return(\r\n        <div className=\"App\">\r\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n  <a class=\"navbar-brand\" href=\"#\">Swastha Sebok</a>\r\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n    <span class=\"navbar-toggler-icon\"></span>\r\n  </button>\r\n\r\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n    <ul class=\"navbar-nav mr-auto\">\r\n      <li class=\"nav-item active\">\r\n        <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link\" href=\"#\">About</a>\r\n      </li>\r\n      <li class=\"nav-item dropdown\">\r\n        <a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n          Services\r\n        </a>\r\n        <div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n          <a class=\"dropdown-item\" href=\"#\">COVID Status</a>\r\n          <a class=\"dropdown-item\" href=\"#\">Self Assess</a>\r\n          <div class=\"dropdown-divider\">Media</div>\r\n          <a class=\"dropdown-item\" href=\"#\">Govt Rules & FAQs</a>\r\n        </div>\r\n      </li>\r\n      <li class=\"nav-item\">\r\n        <a class=\"nav-link disabled\" href=\"#\">Helpline</a>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Header from './Header';\n//import Footer from './Footer';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nReactDOM.render(\n  <Header/>,\n  document.getElementById('header')\n);\n\n//ReactDOM.render(\n  //<Footer/>,\n  //document.getElementById('footer')\n//);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}